---
title: "Make prediction grid"
author: "Max Lindmark"
date: today
date-format: iso
toc: true
format: 
  html:
    page-layout: full
    embed-resources: true
knitr: 
  opts_chunk:
    fig.align: center
    out-width: 100%
editor: source
---

## Load libraries

```{r}
# https://github.com/pbs-assess/gfvelocities/blob/main/R/make_prediction_grid.R
library(sdmTMB)
library(tidyverse)
library(tidylog)
library(sp)
library(raster)
library(terra)
library(devtools)
library(marmap)

home <- here::here()

# Source code for map plots
source(paste0(home, "/R/map-plot.R"))
```

## Pred grid

```{r}
# Read data
d <- read_csv(paste0(home, "/data/clean/lfi_data.csv"))

x <- d$X
y <- d$Y

z <- chull(x, y)

coords <- cbind(x[z], y[z])
coords <- rbind(coords, coords[1, ])

plot(coords[, 1] ~ coords[, 2]) # plot data

sp_poly <- sp::SpatialPolygons(
  list(sp::Polygons(list(sp::Polygon(coords)), ID = 1))
  )

sp_poly_df <- sp::SpatialPolygonsDataFrame(sp_poly,
                                           data = data.frame(ID = 1)
                                           )
class(sp_poly_df)
class(sp_poly)

plot(sp_poly)
plot(sp_poly_df)

cell_width <- 3 # 2*2 km grid cell

pred_grid <- expand.grid(
  X = seq(min(d$X), max(d$X), cell_width),
  Y = seq(min(d$Y), max(d$Y), cell_width),
  year = unique(d$year)
  )

ggplot(pred_grid |> filter(year == max(year)), aes(X, Y)) +
  geom_point(size = 0.1) +
  theme_void() +
  coord_sf()

sp::coordinates(pred_grid) <- c("X", "Y")

inside <- !is.na(sp::over(pred_grid, as(sp_poly_df, "SpatialPolygons")))

pred_grid <- pred_grid[inside, ]

pred_grid <- as.data.frame(pred_grid)

# plot_map +
#   geom_point(data = pred_grid, aes(X*1000, Y*1000), size = 0.001, alpha = 0.5) +
#   facet_wrap(~year, ncol = 10) +
#   geom_sf(size = 0.1) +
#   NULL

# Add lat and lon
xy <- as.matrix(pred_grid |> dplyr::select(X, Y) |> mutate(X = X*1000, Y = Y*1000))
v <- vect(xy, crs="+proj=utm +zone=34 +datum=WGS84  +units=m")
y <- project(v, "+proj=longlat +datum=WGS84")
lonlat <- geom(y)[, c("x", "y")]

pred_grid$lon <- lonlat[, 1]
pred_grid$lat <- lonlat[, 2]

# Add depth
# depth_box <- getNOAA.bathy(min(pred_grid$lon) - .1, max(pred_grid$lon) + .1,
#                            min(pred_grid$lat) - .1, max(pred_grid$lat) + .1)
# 
# plot(depth_box, image=TRUE, deep=-6000, shallow=0, step=1000)
# 
# pred_grid$depth_mar <- get.depth(depth_box, x = pred_grid$lon, y = pred_grid$lat, locator = F)$depth

# # Convert to strictly positive values
# pred_grid$depth <- pred_grid$depth * (-1)
#https://emodnet.ec.europa.eu/geoviewer/#
dep_raster1 <- terra::rast(paste0(home, "/data/depth/Mean depth in multi colour (no land).nc"))
dep_raster2 <- terra::rast(paste0(home, "/data/depth/Mean depth in multi colour (no land).nc 2"))

pred_grid$depth1 <- terra::extract(dep_raster1, pred_grid |> dplyr::select(lon, lat))$elevation
pred_grid$depth2 <- terra::extract(dep_raster2, pred_grid |> dplyr::select(lon, lat))$elevation

pred_grid <- pred_grid |> 
  mutate(depth = depth1, 
         depth = ifelse(is.na(depth), depth2, depth)) |> 
  mutate(depth = depth*-1)

plot_map + 
  geom_raster(data = pred_grid |> filter(year == max(year)),
              aes(X*1000, Y*1000, fill = depth)) +
  geom_sf(size = 0.1)

# Save
write_csv(pred_grid, paste0(home, "/data/clean/pred_grid.csv"))
```

- FIXME: correct depth... 
